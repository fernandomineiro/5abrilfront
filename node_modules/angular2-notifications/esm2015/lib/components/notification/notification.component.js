import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, Input, NgZone, TemplateRef, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NotificationAnimationType } from '../../enums/notification-animation-type.enum';
import { NotificationsService } from '../../services/notifications.service';
export class NotificationComponent {
    constructor(notificationService, domSanitizer, cd, zone) {
        this.notificationService = notificationService;
        this.domSanitizer = domSanitizer;
        this.cd = cd;
        this.zone = zone;
        this.titleIsTemplate = false;
        this.contentIsTemplate = false;
        this.htmlIsTemplate = false;
        this.progressWidth = 0;
        this.stopTime = false;
        this.framesPerSecond = 40;
        this.instance = () => {
            const now = new Date().getTime();
            if (this.endTime < now) {
                this.remove();
                this.item.timeoutEnd.emit();
            }
            else if (!this.stopTime) {
                if (this.showProgressBar) {
                    // We add this.sleepTime just to have 100% before close
                    this.progressWidth = Math.min((now - this.startTime + this.sleepTime) * 100 / this.timeOut, 100);
                }
                this.timer = setTimeout(this.instance, this.sleepTime);
            }
            this.zone.run(() => {
                if (!this.cd.destroyed) {
                    this.cd.detectChanges();
                }
            });
        };
    }
    ngOnInit() {
        if (this.item.override) {
            this.attachOverrides();
        }
        if (this.animate) {
            this.item.state = this.animate;
        }
        if (this.timeOut !== 0) {
            this.startTimeOut();
        }
        this.contentType(this.item.title, 'title');
        this.contentType(this.item.content, 'content');
        this.contentType(this.item.html, 'html');
        this.safeSvg = this.domSanitizer.bypassSecurityTrustHtml(this.icon || this.item.icon);
        this.safeInputHtml = this.domSanitizer.bypassSecurityTrustHtml(this.item.html);
    }
    ngOnDestroy() {
        clearTimeout(this.timer);
        this.cd.detach();
    }
    startTimeOut() {
        this.sleepTime = 1000 / this.framesPerSecond /* ms */;
        this.startTime = new Date().getTime();
        this.endTime = this.startTime + this.timeOut;
        this.zone.runOutsideAngular(() => this.timer = setTimeout(this.instance, this.sleepTime));
    }
    onEnter() {
        if (this.pauseOnHover) {
            this.stopTime = true;
            this.pauseStart = new Date().getTime();
        }
    }
    onLeave() {
        if (this.pauseOnHover) {
            this.stopTime = false;
            this.startTime += (new Date().getTime() - this.pauseStart);
            this.endTime += (new Date().getTime() - this.pauseStart);
            this.zone.runOutsideAngular(() => setTimeout(this.instance, this.sleepTime));
        }
    }
    onClick(event) {
        this.item.click.emit(event);
        if (this.clickToClose) {
            this.remove();
        }
    }
    onClickIcon(event) {
        this.item.clickIcon.emit(event);
        if (this.clickIconToClose) {
            this.remove();
        }
    }
    // Attach all the overrides
    attachOverrides() {
        Object.keys(this.item.override).forEach(a => {
            if (this.hasOwnProperty(a)) {
                this[a] = this.item.override[a];
            }
        });
    }
    remove() {
        if (this.animate) {
            this.item.state = this.animate + 'Out';
            setTimeout(() => {
                this.notificationService.set(this.item, false);
            }, 310);
        }
        else {
            this.notificationService.set(this.item, false);
        }
    }
    contentType(item, key) {
        if (item instanceof TemplateRef) {
            this[key] = item;
        }
        else {
            this[key] = this.domSanitizer.bypassSecurityTrustHtml(item);
        }
        this[key + 'IsTemplate'] = item instanceof TemplateRef;
    }
}
NotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'simple-notification',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        // Fade
                        state('fade', style({ opacity: 1 })),
                        transition('* => fade', [
                            style({ opacity: 0 }),
                            animate('400ms ease-in-out')
                        ]),
                        state('fadeOut', style({ opacity: 0 })),
                        transition('fade => fadeOut', [
                            style({ opacity: 1 }),
                            animate('300ms ease-in-out')
                        ]),
                        // Enter from top
                        state('fromTop', style({ opacity: 1, transform: 'translateY(0)' })),
                        transition('* => fromTop', [
                            style({ opacity: 0, transform: 'translateY(-5%)' }),
                            animate('400ms ease-in-out')
                        ]),
                        state('fromTopOut', style({ opacity: 0, transform: 'translateY(5%)' })),
                        transition('fromTop => fromTopOut', [
                            style({ opacity: 1, transform: 'translateY(0)' }),
                            animate('300ms ease-in-out')
                        ]),
                        // Enter from right
                        state('fromRight', style({ opacity: 1, transform: 'translateX(0)' })),
                        transition('* => fromRight', [
                            style({ opacity: 0, transform: 'translateX(5%)' }),
                            animate('400ms ease-in-out')
                        ]),
                        state('fromRightOut', style({ opacity: 0, transform: 'translateX(-5%)' })),
                        transition('fromRight => fromRightOut', [
                            style({ opacity: 1, transform: 'translateX(0)' }),
                            animate('300ms ease-in-out')
                        ]),
                        // Enter from bottom
                        state('fromBottom', style({ opacity: 1, transform: 'translateY(0)' })),
                        transition('* => fromBottom', [
                            style({ opacity: 0, transform: 'translateY(5%)' }),
                            animate('400ms ease-in-out')
                        ]),
                        state('fromBottomOut', style({ opacity: 0, transform: 'translateY(-5%)' })),
                        transition('fromBottom => fromBottomOut', [
                            style({ opacity: 1, transform: 'translateY(0)' }),
                            animate('300ms ease-in-out')
                        ]),
                        // Enter from left
                        state('fromLeft', style({ opacity: 1, transform: 'translateX(0)' })),
                        transition('* => fromLeft', [
                            style({ opacity: 0, transform: 'translateX(-5%)' }),
                            animate('400ms ease-in-out')
                        ]),
                        state('fromLeftOut', style({ opacity: 0, transform: 'translateX(5%)' })),
                        transition('fromLeft => fromLeftOut', [
                            style({ opacity: 1, transform: 'translateX(0)' }),
                            animate('300ms ease-in-out')
                        ]),
                        // Rotate
                        state('scale', style({ opacity: 1, transform: 'scale(1)' })),
                        transition('* => scale', [
                            style({ opacity: 0, transform: 'scale(0)' }),
                            animate('400ms ease-in-out')
                        ]),
                        state('scaleOut', style({ opacity: 0, transform: 'scale(0)' })),
                        transition('scale => scaleOut', [
                            style({ opacity: 1, transform: 'scale(1)' }),
                            animate('400ms ease-in-out')
                        ]),
                        // Scale
                        state('rotate', style({ opacity: 1, transform: 'rotate(0deg)' })),
                        transition('* => rotate', [
                            style({ opacity: 0, transform: 'rotate(5deg)' }),
                            animate('400ms ease-in-out')
                        ]),
                        state('rotateOut', style({ opacity: 0, transform: 'rotate(-5deg)' })),
                        transition('rotate => rotateOut', [
                            style({ opacity: 1, transform: 'rotate(0deg)' }),
                            animate('400ms ease-in-out')
                        ])
                    ])
                ],
                template: "<div class=\"simple-notification\"\r\n     [@enterLeave]=\"item.state\"\r\n     (click)=\"onClick($event)\"\r\n     [class]=\"theClass\"\r\n     [ngClass]=\"{\r\n            'alert': item.type === 'alert',\r\n            'error': item.type === 'error',\r\n            'warn': item.type === 'warn',\r\n            'success': item.type === 'success',\r\n            'info': item.type === 'info',\r\n            'bare': item.type === 'bare',\r\n            'rtl-mode': rtl,\r\n            'has-icon': item.icon !== 'bare'\r\n        }\"\r\n     (mouseenter)=\"onEnter()\"\r\n     (mouseleave)=\"onLeave()\">\r\n\r\n    <div *ngIf=\"!item.html\">\r\n\r\n        <div class=\"sn-title\" *ngIf=\"titleIsTemplate; else regularTitle\">\r\n            <ng-container *ngTemplateOutlet=\"title; context: item.context\"></ng-container>\r\n        </div>\r\n\r\n        <ng-template #regularTitle>\r\n            <div class=\"sn-title\" [innerHTML]=\"title\"></div>\r\n        </ng-template>\r\n\r\n        <div class=\"sn-content\" *ngIf=\"contentIsTemplate else regularContent\">\r\n            <ng-container *ngTemplateOutlet=\"content; context: item.context\"></ng-container>\r\n        </div>\r\n\r\n        <ng-template #regularContent>\r\n            <div class=\"sn-content\" [innerHTML]=\"content\"></div>\r\n        </ng-template>\r\n\r\n        <div class=\"icon\" *ngIf=\"item.icon !== 'bare'\" [innerHTML]=\"safeSvg\"></div>\r\n    </div>\r\n    <div *ngIf=\"item.html\">\r\n        <div class=\"sn-html\" *ngIf=\"htmlIsTemplate; else regularHtml\">\r\n            <ng-container *ngTemplateOutlet=\"item.html; context: item.context\"></ng-container>\r\n        </div>\r\n\r\n        <ng-template #regularHtml>\r\n            <div class=\"sn-content\" [innerHTML]=\"safeInputHtml\"></div>\r\n        </ng-template>\r\n\r\n        <div class=\"icon\" [class.icon-hover]=\"clickIconToClose\" *ngIf=\"item.icon\" [innerHTML]=\"safeSvg\" (click)=\"onClickIcon($event)\"></div>\r\n    </div>\r\n\r\n    <div class=\"sn-progress-loader\" *ngIf=\"showProgressBar\">\r\n        <span [ngStyle]=\"{'width': progressWidth + '%'}\"></span>\r\n    </div>\r\n\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".simple-notification{width:100%;padding:10px 20px;box-sizing:border-box;position:relative;float:left;margin-bottom:10px;color:#fff;cursor:pointer;transition:.5s;min-height:70px}.simple-notification .sn-content,.simple-notification .sn-html,.simple-notification .sn-title{margin:0}.simple-notification .sn-title{line-height:30px;font-size:20px}.simple-notification .sn-content{font-size:16px;line-height:20px}.simple-notification.has-icon .sn-content,.simple-notification.has-icon .sn-html,.simple-notification.has-icon .sn-title{padding:0 50px 0 0}.simple-notification .icon{position:absolute;box-sizing:border-box;top:0;right:0;width:70px;height:70px;padding:10px}.simple-notification .icon.icon-hover:hover{opacity:.5}.simple-notification .icon svg{fill:#fff;width:100%;height:100%}.simple-notification .icon svg g{fill:#fff}.simple-notification.rtl-mode.has-icon .sn-content,.simple-notification.rtl-mode.has-icon .sn-html,.simple-notification.rtl-mode.has-icon .sn-title{padding:0 0 0 50px}.simple-notification.rtl-mode{direction:rtl}.simple-notification.rtl-mode .sn-content{padding:0 0 0 50px}.simple-notification.rtl-mode svg{left:0;right:auto}.simple-notification.error{background:#f44336}.simple-notification.success{background:#8bc34a}.simple-notification.alert{background:#ffdb5b}.simple-notification.info{background:#03a9f4}.simple-notification.warn{background:#ffdb5b}.simple-notification .sn-progress-loader{position:absolute;top:0;left:0;width:100%;height:5px}.simple-notification .sn-progress-loader span{float:left;height:100%}.simple-notification.success .sn-progress-loader span{background:#689f38}.simple-notification.error .sn-progress-loader span{background:#d32f2f}.simple-notification.alert .sn-progress-loader span{background:#edc242}.simple-notification.info .sn-progress-loader span{background:#0288d1}.simple-notification.warn .sn-progress-loader span{background:#edc242}.simple-notification.bare .sn-progress-loader span{background:#ccc}.simple-notification.warn div .sn-content,.simple-notification.warn div .sn-html,.simple-notification.warn div .sn-title{color:#444}"]
            }] }
];
/** @nocollapse */
NotificationComponent.ctorParameters = () => [
    { type: NotificationsService },
    { type: DomSanitizer },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
NotificationComponent.propDecorators = {
    timeOut: [{ type: Input }],
    showProgressBar: [{ type: Input }],
    pauseOnHover: [{ type: Input }],
    clickToClose: [{ type: Input }],
    clickIconToClose: [{ type: Input }],
    maxLength: [{ type: Input }],
    theClass: [{ type: Input }],
    rtl: [{ type: Input }],
    animate: [{ type: Input }],
    position: [{ type: Input }],
    item: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,